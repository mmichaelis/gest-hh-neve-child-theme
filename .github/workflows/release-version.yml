name: "Release Version"

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type.'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      verbose:
        description: "If to output a summary."
        required: false
        type: boolean
        default: true
      dryRun:
        description: "If to perform a dryRun without push at the end."
        required: false
        type: boolean
        default: true
  workflow_call:
    inputs:
      release_type:
        description: 'Release type.'
        required: true
        default: 'patch'
        type: string
      verbose:
        description: "If to output a summary."
        required: false
        type: boolean
        default: false
      dryRun:
        description: "If to perform a dryRun without push at the end."
        required: false
        type: boolean
        default: false
    outputs:
      version:
        description: "Released version"
        value: ${{ jobs.main.outputs.version }}
      nextVersion:
        description: "Snapshot version"
        value: ${{ jobs.main.outputs.nextVersion }}

run-name: |
  ${{ github.workflow }} (release type: ${{ github.event.inputs.release_type }}, dry-run: ${{ github.event.inputs.dryRun }}, verbose: ${{ github.event.inputs.verbose }})

env:
  # https://github.com/actions/runner-images/issues/70
  NODE_OPTIONS: "--max_old_space_size=4096"
  RELEASE_TYPE: ${{ inputs.release_type }}
  SNAPSHOT_TYPE: "prerelease"
  USER_NAME: ${{ github.actor }}
  USER_MAIL: "${{ github.actor }}@users.noreply.github.com"

permissions:
  contents: write

jobs:
  about:
    name: "About"
    uses: "./.github/workflows/about.yml"
  main:
    name: "Release Version"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs:
      - about
    env:
      nodeVersion: ${{ needs.about.outputs.nodeVersion }}
      pnpmVersion: ${{ needs.about.outputs.pnpmVersion }}
    outputs:
      version: ${{ steps.inc-version.outputs.result }}
      nextVersion: ${{ steps.inc-snapshot-version.outputs.result }}
    steps:
      - id: checkout
        name: "Checkout"
        uses: actions/checkout@v4
      - id: installPnpm
        name: "Install: Use PNPM ${{ env.pnpmVersion }}"
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.pnpmVersion }}
          run_install: false
      - id: installNodeJs
        name: "Install: Use Node.js ${{ env.nodeVersion }}"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.nodeVersion }}
          cache: "pnpm"
      - id: install
        name: "Install"
        run: |
          pnpm install --frozen-lockfile
      - id: config
        name: "Git Config"
        run: |
          git config --global user.name "${{ env.USER_NAME }}"
          git config --global user.email "${{ env.USER_MAIL }}"
          echo "Done configuring Git: user.name and user.email."
      - id: inc-version
        name: "Increment Version"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          releaseType=${{ env.RELEASE_TYPE }}
          releaseVersion="$(pnpm version --silent "${releaseType}" --message "chore: release ${releaseType}: %s")"
          echo "Release Version: ${releaseVersion}"
          echo "result=${releaseVersion}" >> $GITHUB_OUTPUT
      - id: inc-snapshot-version
        name: "Increment Snapshot Version"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          snapshotType=${{ env.SNAPSHOT_TYPE }}
          snapshotVersion="$(pnpm version --silent "${snapshotType}" --no-git-tag-version)"
          git commit -am "chore: next snapshot version: ${snapshotVersion}"
          echo "Next Version: ${snapshotVersion}"
          echo "result=${snapshotVersion}" >> $GITHUB_OUTPUT
      - id: git-push
        if: ${{ github.event.inputs.dryRun }}
        name: "Push Changes"
        run: |
          git push --follow-tags
      - id: git-push-dry-run
        if: ${{ github.event.inputs.dryRun }}
        name: "Push Changes (Dry Run)"
        run: |
          git push --follow-tags --dry-run
  verbose:
    name: "Verbose"
    runs-on: ubuntu-latest
    needs: main
    if: ${{ github.event.inputs.verbose }}
    steps:
      - id: output
        name: "Output"
        run: |
          echo "# Release Version" >> $GITHUB_STEP_SUMMARY
          echo "## Parameters" >> $GITHUB_STEP_SUMMARY
          echo "* Released Type: ${{ env.RELEASE_TYPE }}" >> $GITHUB_STEP_SUMMARY
          echo "* Verbose: ${{ inputs.verbose }}" >> $GITHUB_STEP_SUMMARY
          echo "* Dry-Run: ${{ inputs.dryRun }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Result" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "* Released Version: ${{ needs.main.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "* Snapshot Version: ${{ needs.main.outputs.nextVersion }}" >> $GITHUB_STEP_SUMMARY
